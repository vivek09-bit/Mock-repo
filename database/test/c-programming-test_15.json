[
     {
          "direction": null,
          "image_path": null,
          "question": "The modulus operator cannot be used with along double.",
          "options": {
               "A": "True",
               "B": "False"
          },
          "correct_answer": "A",
          "answer_description": "fmod(x,y)- Calculates x modulo y, the remainder of x/y.This function is the same as the modulus operator. Butfmod()performs floating point orlong doubledivisions."
     },
     {
          "direction": null,
          "image_path": null,
          "question": "What will be the output of the program?#include<stdio.h>\r\nint main()\r\n{\r\n    int i=-3, j=2, k=0, m;\r\n    m = ++i && ++j && ++k;\r\n    printf(\"%d, %d, %d, %d\\n\", i, j, k, m);\r\n    return 0;\r\n}",
          "options": {
               "A": "-2, 3, 1, 1",
               "B": "2, 3, 1, 2",
               "C": "1, 2, 3, 1",
               "D": "3, 3, 1, 2"
          },
          "correct_answer": "A",
          "answer_description": "Step 1:int i=-3, j=2, k=0, m;here variablei, j, k, mare declared as an integer type and variablei, j, kare initialized to -3, 2, 0 respectively.Step 2:m = ++i && ++j && ++k;becomesm = -2 && 3 && 1;becomesm = TRUE && TRUE;Hence this statement becomes TRUE. So it returns '1'(one). Hence m=1.Step 3:printf(\"%d, %d, %d, %d\\n\", i, j, k, m);In the previous step the value of i,j,k are increemented by '1'(one).Hence the output is \"-2, 3, 1, 1\"."
     },
     {
          "direction": null,
          "image_path": null,
          "question": "In a function tworeturnstatements should never occur.",
          "options": {
               "A": "Yes",
               "B": "No"
          },
          "correct_answer": "B",
          "answer_description": "No, In a function tworeturnstatements can occur but not successively.Example:#include <stdio.h>\nint mul(int, int); /* Function prototype */\n\nint main()\n{\n    int a = 0, b = 3, c;\n    c = mul(a, b);\n    printf(\"c = %d\\n\", c);\n    return 0;\n}\n\n/* Two return statements in the mul() function */\nint mul(int a, int b)\n{\n   if(a == 0 || b == 0)\n   {\n        return 0;\n   }\n   else\n   {\n        return (a * b);\n   }\n}Output:c = 0"
     },
     {
          "direction": null,
          "image_path": null,
          "question": "It is necessary that a header files should have a .h extension?",
          "options": {
               "A": "Yes",
               "B": "No"
          },
          "correct_answer": "B",
          "answer_description": "No, the header files have any kind of extension."
     },
     {
          "direction": null,
          "image_path": null,
          "question": "How many bytes are occupied bynear, farandhugepointers (DOS)?",
          "options": {
               "A": "near=2 far=4 huge=4",
               "B": "near=4 far=8 huge=8",
               "C": "near=2 far=4 huge=8",
               "D": "near=4 far=4 huge=8"
          },
          "correct_answer": "A",
          "answer_description": "near=2,far=4andhuge=4pointers exist only under DOS. Under windows and Linux every pointers is 4 bytes long."
     },
     {
          "direction": null,
          "image_path": null,
          "question": "What will be the output of the program ?#include<stdio.h>\n\nint main()\n{\n    void *vp;\n    char ch=74, *cp=\"JACK\";\n    int j=65;\n    vp=&ch\n    printf(\"%c\", *(char*)vp);\n    vp=&j\n    printf(\"%c\", *(int*)vp);\n    vp=cp;\n    printf(\"%s\", (char*)vp+2);\n    return 0;\n}",
          "options": {
               "A": "JCK",
               "B": "J65K",
               "C": "JAK",
               "D": "JACK"
          },
          "correct_answer": "D",
          "answer_description": "Description not found"
     },
     {
          "direction": null,
          "image_path": null,
          "question": "What will be the output of the program ?#include<stdio.h>\n\nint main()\n{\n    int x=30, *y, *z;\n    y=&x; /* Assume address of x is 500 and integer is 4 byte size */\n    z=y;\n    *y++=*z++;\n    x++;\n    printf(\"x=%d, y=%d, z=%d\\n\", x, y, z);\n    return 0;\n}",
          "options": {
               "A": "x=31, y=502, z=502",
               "B": "x=31, y=500, z=500",
               "C": "x=31, y=498, z=498",
               "D": "x=31, y=504, z=504"
          },
          "correct_answer": "D",
          "answer_description": "Description not found"
     },
     {
          "direction": null,
          "image_path": null,
          "question": "Which of the statements is correct about the program?#include<stdio.h>\n\nint main()\n{\n    int arr[3][3] = {1, 2, 3, 4};\n    printf(\"%d\\n\", *(*(*(arr))));\n    return 0;\n}",
          "options": {
               "A": "Output: Garbage value",
               "B": "Output: 1",
               "C": "Output: 3",
               "D": "Error: Invalid indirection"
          },
          "correct_answer": "D",
          "answer_description": "Description not found"
     },
     {
          "direction": null,
          "image_path": null,
          "question": "What will be the output of the program ?#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n    char str[] = \"India\\0\\BIX\\0\";\n    printf(\"%s\\n\", str);\n    return 0;\n}",
          "options": {
               "A": "BIX",
               "B": "India",
               "C": "India BIX",
               "D": "India\\0BIX"
          },
          "correct_answer": "B",
          "answer_description": "A string is a collection of characters terminated by '\\0'.Step 1:char str[] = \"India\\0\\BIX\\0\";The variable str is declared as an array of characters and initialized with value \"India\"Step 2:printf(\"%s\\n\", str);It prints the value of thestr.The output of the program is \"India\"."
     },
     {
          "direction": null,
          "image_path": null,
          "question": "What will be the output of the program in Turbo C (under DOS)?#include<stdio.h>\n\nint main()\n{\n    struct emp\n    {\n        char *n;\n        int age;\n    };\n    struct emp e1 = {\"Dravid\", 23};\n    struct emp e2 = e1;\n    strupr(e2.n);\n    printf(\"%s\\n\", e1.n);\n    return 0;\n}",
          "options": {
               "A": "Error: Invalid structure assignment",
               "B": "DRAVID",
               "C": "Dravid",
               "D": "No output"
          },
          "correct_answer": "B",
          "answer_description": "Description not found"
     },
     {
          "direction": null,
          "image_path": null,
          "question": "Point out the error in the program?#include<stdio.h>\n#include<string.h>\nvoid modify(struct emp*);\nstruct emp\n{\n    char name[20];\n    int age;\n};\nint main()\n{\n    struct emp e = {\"Sanjay\", 35};\n    modify(&e);\n    printf(\"%s %d\", e.name, e.age);\n    return 0;\n}\nvoid modify(struct emp *p)\n{\n     p ->age=p->age+2;\n}",
          "options": {
               "A": "Error: in structure",
               "B": "Error: in prototype declaration unknown struct emp",
               "C": "No error",
               "D": "None of above"
          },
          "correct_answer": "B",
          "answer_description": "Thestruct empis mentioned in the prototype of the functionmodify()before declaring the structure.To solve this problem declarestruct empbefore themodify()prototype."
     },
     {
          "direction": null,
          "image_path": null,
          "question": "Point out the error in the program?#include<stdio.h>\n\nint main()\n{\n    struct a\n    {\n        float category:5;\n        char scheme:4;\n    };\n    printf(\"size=%d\", sizeof(struct a));\n    return 0;\n}",
          "options": {
               "A": "Error: invalid structure member inprintf",
               "B": "Error in thisfloat category:5;statement",
               "C": "No error",
               "D": "None of above"
          },
          "correct_answer": "B",
          "answer_description": "Bit field type must besigned intorunsigned int.The char type:char scheme:4;is also a valid statement."
     },
     {
          "direction": null,
          "image_path": null,
          "question": "The '.' operator can be used access structure elements using a structure variable.",
          "options": {
               "A": "True",
               "B": "False"
          },
          "correct_answer": "A",
          "answer_description": "Description not found"
     },
     {
          "direction": null,
          "image_path": null,
          "question": "Can we specify a variable filed width in ascanf()format string?",
          "options": {
               "A": "Yes",
               "B": "No"
          },
          "correct_answer": "B",
          "answer_description": "Inscanf()a * in a format string after a % sign is used for the suppression of assignment. That is, the current input field is scanned but not stored."
     },
     {
          "direction": null,
          "image_path": null,
          "question": "Which header file should be included to use functions likemalloc()andcalloc()?",
          "options": {
               "A": "memory.h",
               "B": "stdlib.h",
               "C": "string.h",
               "D": "dos.h"
          },
          "correct_answer": "B",
          "answer_description": "Description not found"
     },
     {
          "direction": null,
          "image_path": null,
          "question": "Ifmalloc()successfully allocates memory it returns the number of bytes it has allocated.",
          "options": {
               "A": "True",
               "B": "False"
          },
          "correct_answer": "B",
          "answer_description": "Syntax: void *malloc(size_t size);The malloc() function shall allocate unused space for an object whose size in bytes is specified by size and whose value is unspecified.The order and contiguity of storage allocated by successive calls to malloc() is unspecified. Thepointer returned if the allocation succeedsshall be suitably aligned so that it may be assigned to a pointer to any type of object and then used to access such an object in the space allocated (until the space is explicitly freed or reallocated). Each such allocation shall yield a pointer to an object disjoint from any other object. The pointer returned points to the start (lowest byte address) of the allocated space. If the space cannot be allocated, a null pointer shall be returned. If the size of the space requested is 0, the behavior is implementation-defined: the value returned shall be either a null pointer or a unique pointer."
     },
     {
          "direction": null,
          "image_path": null,
          "question": "In a function that receives variable number of arguments the fixed arguments passed to the function can be at the end of argument list.",
          "options": {
               "A": "True",
               "B": "False"
          },
          "correct_answer": "B",
          "answer_description": "Description not found"
     },
     {
          "direction": null,
          "image_path": null,
          "question": "We can allocate a 2-Dimensional array dynamically.",
          "options": {
               "A": "True",
               "B": "False"
          },
          "correct_answer": "A",
          "answer_description": "Description not found"
     },
     {
          "direction": null,
          "image_path": null,
          "question": "Are the following declarations same?char far *far *scr;\nchar far far** scr;",
          "options": {
               "A": "Yes",
               "B": "No"
          },
          "correct_answer": "B",
          "answer_description": "Description not found"
     },
     {
          "direction": null,
          "image_path": null,
          "question": "What is the purpose offflush()function.",
          "options": {
               "A": "flushes all streams and specified streams.",
               "B": "flushes only specified stream.",
               "C": "flushes input/output buffer.",
               "D": "flushes file buffer."
          },
          "correct_answer": "A",
          "answer_description": "\"fflush()\" flush any buffered output associated with filename, which is either a file opened for writing or a shell command for redirecting output to a pipe or coprocess.Example:fflush(FilePointer);fflush(NULL);flushes all streams."
     }
]