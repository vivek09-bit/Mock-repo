[
    {
        "direction": null,
        "image_path": null,
        "question": "What is the purpose of thenext()function when working with generators?",
        "options": {
            "A": "It generates the next random number",
            "B": "It retrieves the next element from the generator",
            "C": "It initializes the generator function",
            "D": "It terminates the generator"
        },
        "correct_answer": "B",
        "answer_description": "Thenext()function is used to retrieve the next element produced by a generator. It advances the generator's state and returns the value generated by theyieldstatement."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "How does a generator handle large datasets compared to a list?",
        "options": {
            "A": "Generators are slower than lists for large datasets",
            "B": "Generators consume more memory than lists",
            "C": "Generators are not suitable for large datasets",
            "D": "Generators are more memory-efficient than lists"
        },
        "correct_answer": "D",
        "answer_description": "Generators produce values on-the-fly, allowing them to handle large datasets efficiently by not storing the entire sequence in memory. This makes generators more memory-efficient than lists."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "What will happen if a generator function reaches the end of its execution?",
        "options": {
            "A": "It raises aStopIterationexception",
            "B": "It automatically restarts from the beginning",
            "C": "It continues to the next iteration",
            "D": "It raises aGeneratorExitexception"
        },
        "correct_answer": "A",
        "answer_description": "When a generator function completes its execution or reaches areturnstatement, it raises aStopIterationexception to indicate the end of the iteration."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "What is the advantage of using theyield fromstatement in a generator function?",
        "options": {
            "A": "It replaces theyieldkeyword",
            "B": "It simplifies the generator function syntax",
            "C": "It allows delegation to another generator",
            "D": "It is used for generator initialization"
        },
        "correct_answer": "C",
        "answer_description": "Theyield fromstatement in a generator function allows delegation to another generator, simplifying the syntax and enabling one generator to yield values from another."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "What is the main difference between a generator and a list comprehension?",
        "options": {
            "A": "Generators are used for creating lists, while list comprehensions produce iterators",
            "B": "List comprehensions create lists in memory, while generators produce values on-the-fly",
            "C": "List comprehensions can only be used with numerical data, while generators work with any data type",
            "D": "Generators use thelist()constructor, while list comprehensions usegenerator()"
        },
        "correct_answer": "B",
        "answer_description": "List comprehensions create lists in memory, whereas generators produce values on-the-fly and do not store the entire sequence in memory. Generators are more memory-efficient."
    }
]