[
    {
        "direction": null,
        "image_path": null,
        "question": "What is operator overloading?",
        "options": {
            "A": "The ability of a function to take different types of arguments",
            "B": "The ability of a class to inherit from multiple classes",
            "C": "The ability of an object to take on multiple forms or types",
            "D": "The ability to define custom behavior for operators in a class"
        },
        "correct_answer": "D",
        "answer_description": "Operator overloading in Python allows you to define custom behavior for operators in a class by implementing special methods like__add__(),__sub__(), etc."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "Which of the following is an example of method overloading?",
        "options": {
            "A": "Defining a method with the same name in a class",
            "B": "Defining a method with the same name but different parameters in a class",
            "C": "Defining a method with the same name but different return types in a class",
            "D": "Defining a method with different access modifiers in a class"
        },
        "correct_answer": "B",
        "answer_description": "Method overloading in Python is achieved by defining a method with the same name but different parameters in a class."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "Consider the following code:class Animal:\r\n    def speak(self):\r\n        pass\r\n\r\nclass Dog(Animal):\r\n    def speak(self):\r\n        return \"Woof!\"\r\n\r\nclass Cat(Animal):\r\n    def speak(self):\r\n        return \"Meow!\"What concept is demonstrated in this code?",
        "options": {
            "A": "Method overloading",
            "B": "Method overriding",
            "C": "Operator overloading",
            "D": "Polymorphism"
        },
        "correct_answer": "B",
        "answer_description": "This code demonstrates method overriding, where the subclasses provide specific implementations for a method defined in the superclass."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "How is polymorphism different from encapsulation?",
        "options": {
            "A": "Polymorphism is the ability to hide implementation details, while encapsulation is the ability of an object to take on multiple forms.",
            "B": "Polymorphism is the ability to define custom behavior for operators, while encapsulation is the bundling of data and methods that operate on the data.",
            "C": "Polymorphism is the ability of a function to take different types of arguments, while encapsulation is the ability to represent data and the methods that operate on the data within a single unit.",
            "D": "Polymorphism is the ability of an object to take on multiple forms or types, while encapsulation is the ability to restrict access to certain details of an object and only expose what is necessary."
        },
        "correct_answer": "D",
        "answer_description": "Polymorphism is about the ability of objects to take on multiple forms or types, while encapsulation is about bundling data and methods within a single unit and controlling access to details."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "What is the purpose of the__iter__()method in Python classes in the context of polymorphism?",
        "options": {
            "A": "To create a new instance of the class",
            "B": "To customize the behavior when an instance is deleted",
            "C": "To customize the behavior when theiter()function is called on an instance",
            "D": "To access superclass attributes directly"
        },
        "correct_answer": "C",
        "answer_description": "The__iter__()method is used to customize the behavior when theiter()function is called on an instance of the class, allowing for polymorphic behavior."
    }
]