[
    {
        "direction": null,
        "image_path": null,
        "question": "What will be the output of the program?public class Test \n{  \n    public static void main(String[] args) \n    { \n        int x = 0;  \n        assert (x > 0) ? \"assertion failed\" : \"assertion passed\" ; \n        System.out.println(\"finished\");  \n    } \n}",
        "options": {
            "A": "finished",
            "B": "Compiliation fails.",
            "C": "AnAssertionErroris thrown and finished is output.",
            "D": "AnAssertionErroris thrown with the message \"assertion failed.\""
        },
        "correct_answer": "B",
        "answer_description": "Compilation Fails. You can't use the Assert statement in a similar way to the ternary operator. Don't confuse."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "public class Test \n{ \n    public void foo() \n    {\n        assert false; /* Line 5 */\n        assert false; /* Line 6 */\n    } \n    public void bar()\n    {\n        while(true)\n        {\n            assert false; /* Line 12 */\n        } \n        assert false;  /* Line 14 */\n    } \n}What causes compilation to fail?",
        "options": {
            "A": "Line 5",
            "B": "Line 6",
            "C": "Line 12",
            "D": "Line 14"
        },
        "correct_answer": "D",
        "answer_description": "Option D is correct. Compilation fails because of an unreachable statement at line 14. It is a compile-time error if a statement cannot be executed because it is unreachable. The question is now, why is line 20 unreachable? If it is because of the assert then surely line 6 would also be unreachable. The answer must be something other than assert.Examine the following:A while statement can complete normally if and only if at least one of the following is true:- Thewhilestatement is reachable and the condition expression is not a constant expression with value true.-There is a reachable break statement that exits thewhilestatement.The while statement at line 11 is infinite and there is no break statement therefore line 14 is unreachable. You can test this with the following code:public class Test80 \n{ \n    public void foo() \n    {\n        assert false; \n        assert false; \n    } \n    public void bar()\n    {\n        while(true)\n        {\n            assert false; \n            break; \n        } \n        assert false;  \n    } \n}"
    },
    {
        "direction": null,
        "image_path": null,
        "question": "What will be the output of the program?public class Test \n{\n    public static int y;\n    public static void foo(int x) \n    {\n        System.out.print(\"foo \");\n        y = x;\n    }\n    public static int bar(int z) \n    {\n        System.out.print(\"bar \");\n        return y = z;\n    }\n    public static void main(String [] args ) \n    {\n        int t = 0;\n        assert t > 0 : bar(7);\n        assert t > 1 : foo(8); /* Line 18 */\n        System.out.println(\"done \");\n    }\n}",
        "options": {
            "A": "bar",
            "B": "bar done",
            "C": "foo done",
            "D": "Compilation fails"
        },
        "correct_answer": "D",
        "answer_description": "Thefoo()method returns void. It is a perfectly acceptable method, but because it returns void it cannot be used in anassertstatement, so line 18 will not compile."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "What will be the output of the program (when you run with the -ea option) ?public class Test \n{  \n    public static void main(String[] args) \n    {\n        int x = 0;  \n        assert (x > 0) : \"assertion failed\"; /* Line 6 */\n        System.out.println(\"finished\"); \n    } \n}",
        "options": {
            "A": "finished",
            "B": "Compilation fails.",
            "C": "An AssertionError is thrown.",
            "D": "An AssertionError is thrown and finished is output."
        },
        "correct_answer": "C",
        "answer_description": "An assertion Error is thrown as normal giving the output \"assertion failed\". The word \"finished\" is not printed (ensure you run with the-eaoption)Assertion failures are generally labeled in the stack trace with the file and line number from which they were thrown, and also in this case with the error's detail message  \"assertion failed\". The detail message is supplied by the assert statement in line 6."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "public class Test2 \n{\n    public static int x;\n    public static int foo(int y) \n    {\n        return y * 2;\n    }\n    public static void main(String [] args) \n    {\n        int z = 5;\n        assert z > 0; /* Line 11 */\n        assert z > 2: foo(z); /* Line 12 */\n        if ( z < 7 )\n            assert z > 4; /* Line 14 */\n\n        switch (z) \n        {\n            case 4: System.out.println(\"4 \");\n            case 5: System.out.println(\"5 \");\n            default: assert z < 10;\n        }\n\n        if ( z < 10 )\n            assert z > 4: z++; /* Line 22 */\n        System.out.println(z);\n    }\n}which line is an example of an inappropriate use of assertions?",
        "options": {
            "A": "Line 11",
            "B": "Line 12",
            "C": "Line 14",
            "D": "Line 22"
        },
        "correct_answer": "D",
        "answer_description": "Assert statements should not cause side effects. Line 22 changes the value ofzif the assert statement isfalse.Option A is fine; a second expression in an assert statement is not required.Option B is fine because it is perfectly acceptable to call a method with the second expression of an assert statement.Option C is fine because it is proper to call an assert statement conditionally."
    }
]