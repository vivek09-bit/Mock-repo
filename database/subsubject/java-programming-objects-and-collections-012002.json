[
    {
        "direction": null,
        "image_path": null,
        "question": "Which interface provides the capability to store objects using a key-value pair?",
        "options": {
            "A": "Java.util.Map",
            "B": "Java.util.Set",
            "C": "Java.util.List",
            "D": "Java.util.Collection"
        },
        "correct_answer": "A",
        "answer_description": "An object that maps keys to values. A map cannot contain duplicate keys; each key can map to at most one value."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "Which collection class allows you to associate its elements with key values, and allows you to retrieve objects in FIFO (first-in, first-out) sequence?",
        "options": {
            "A": "java.util.ArrayList",
            "B": "java.util.LinkedHashMap",
            "C": "java.util.HashMap",
            "D": "java.util.TreeMap"
        },
        "correct_answer": "B",
        "answer_description": "LinkedHashMapis the collection class used for caching purposes. FIFO is another way to indicate caching behavior. To retrieveLinkedHashMapelements in cached order, use thevalues()method and iterate over the resultant collection."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "Which collection class allows you to access its elements by associating a key with an element's value, and provides synchronization?",
        "options": {
            "A": "java.util.SortedMap",
            "B": "java.util.TreeMap",
            "C": "java.util.TreeSet",
            "D": "java.util.Hashtable"
        },
        "correct_answer": "D",
        "answer_description": "Hashtableis the only class listed that provides synchronized methods. If you need synchronization great; otherwise, useHashMap, it's faster."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "Which is valid declaration of a float?",
        "options": {
            "A": "float f = 1F;",
            "B": "float f = 1.0;",
            "C": "float f = \"1\";",
            "D": "float f = 1.0d;"
        },
        "correct_answer": "A",
        "answer_description": "Option A is valid declaration of float.Option B is incorrect because any literal number with a decimal point u declare the computer will implicitly cast to double unless you include \"F or f\"Option C is incorrect because it is aString.Option D is incorrect because \"d\" tells the computer it is a double so therefore you are trying to put a double value into a float variable i.e there might be a loss of precision."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "/* Missing Statement ? */\npublic class foo \n{\n    public static void main(String[]args)throws Exception \n    {\n        java.io.PrintWriter out = new java.io.PrintWriter(); \n        new java.io.OutputStreamWriter(System.out,true); \n        out.println(\"Hello\"); \n    } \n}What line of code should replace the missing statement to make this program compile?",
        "options": {
            "A": "No statement required.",
            "B": "import java.io.*;",
            "C": "include java.io.*;",
            "D": "import java.io.PrintWriter;"
        },
        "correct_answer": "A",
        "answer_description": "The usual method for using/importing the java packages/classes is by using an import statement at the top of your code. However it is possible to explicitly import the specific class that you want to use as you use it which is shown in the code above. The disadvantage of this however is that every time you create a new object you will have to use the class path in the case \"java.io\" then the class name in the long run leading to a lot more typing."
    }
]