[
    {
        "direction": null,
        "image_path": null,
        "question": "What will be the output of the program?class PassA \n{\n    public static void main(String [] args) \n    {\n        PassA p = new PassA();\n        p.start();\n    }\n\n    void start() \n    {\n        long [] a1 = {3,4,5};\n        long [] a2 = fix(a1);\n        System.out.print(a1[0] + a1[1] + a1[2] + \" \");\n        System.out.println(a2[0] + a2[1] + a2[2]);\n    }\n\n    long [] fix(long [] a3) \n    {\n        a3[1] = 7;\n        return a3;\n    }\n}",
        "options": {
            "A": "12 15",
            "B": "15 15",
            "C": "3 4 5 3 7 5",
            "D": "3 7 5 3 7 5"
        },
        "correct_answer": "B",
        "answer_description": "Output: 15 15The reference variablesa1anda3refer to the same long array object. When the[1]element is updated in thefix()method, it is updating the array referred to bya1. The reference variablea2refers to the same array object.So Output: 3+7+5+\" \"3+7+5Output: 15 15 Because Numeric values will be added"
    },
    {
        "direction": null,
        "image_path": null,
        "question": "What will be the output of the program?class Test \n{\n    public static void main(String [] args) \n    {\n        Test p = new Test();\n        p.start();\n    }\n\n    void start() \n    {\n        boolean b1 = false;\n        boolean b2 = fix(b1);\n        System.out.println(b1 + \" \" + b2);\n    }\n\n    boolean fix(boolean b1) \n    {\n        b1 = true;\n        return b1;\n    }\n}",
        "options": {
            "A": "true true",
            "B": "false true",
            "C": "true false",
            "D": "false false"
        },
        "correct_answer": "B",
        "answer_description": "The booleanb1in thefix()method is a different boolean than theb1in thestart()method. Theb1in thestart()method is not updated by thefix()method."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "What will be the output of the program?class PassS \n{\n    public static void main(String [] args) \n    {\n        PassS p = new PassS();\n        p.start();\n    }\n\n    void start() \n    {\n        String s1 = \"slip\";\n        String s2 = fix(s1);\n        System.out.println(s1 + \" \" + s2);\n    }\n\n    String fix(String s1) \n    {\n        s1 = s1 + \"stream\";\n        System.out.print(s1 + \" \");\n        return \"stream\";\n    }\n}",
        "options": {
            "A": "slip stream",
            "B": "slipstream stream",
            "C": "stream slip stream",
            "D": "slipstream slip stream"
        },
        "correct_answer": "D",
        "answer_description": "When thefix()method is first entered,start()'s s1 andfix()'ss1reference variables both refer to the same String object (with a value of \"slip\").Fix()'ss1is reassigned to a new object that is created when the concatenation occurs (this second String object has a value of \"slipstream\"). When the program returns tostart(), anotherStringobject is created, referred to bys2and with a value of \"stream\"."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "What will be the output of the program?class BitShift \n{\n    public static void main(String [] args) \n    {\n        int x = 0x80000000;\n        System.out.print(x + \" and  \");\n        x = x >>> 31;\n        System.out.println(x);\n    }\n}",
        "options": {
            "A": "-2147483648 and 1",
            "B": "0x80000000 and 0x00000001",
            "C": "-2147483648 and -1",
            "D": "1 and -2147483648"
        },
        "correct_answer": "A",
        "answer_description": "Option A is correct. The>>>operator moves all bits to the right, zero filling the left bits. The bit transformation looks like this:Before:1000 0000 0000 0000 0000 0000 0000 0000After:0000 0000 0000 0000 0000 0000 0000 0001Option C is incorrect because the>>>operator zero fills the left bits, which in this case changes the sign ofx, as shown.Option B is incorrect because the output methodprint()always displays integers in base 10.Option D is incorrect because this is the reverse order of the two output numbers."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "What will be the output of the program?class Equals \n{\n    public static void main(String [] args) \n    {\n        int x = 100;\n        double y = 100.1;\n        boolean b = (x = y); /* Line 7 */\n        System.out.println(b);\n    }\n}",
        "options": {
            "A": "true",
            "B": "false",
            "C": "Compilation fails",
            "D": "An exception is thrown at runtime"
        },
        "correct_answer": "C",
        "answer_description": "The code will not compile because in line 7, the line will work only if we use(x==y)in the line. The==operator compares values to produce a boolean, whereas the=operator assigns a value to variables.Option A, B, and D are incorrect because the code does not get as far as compiling. If we corrected this code, the output would be false."
    }
]