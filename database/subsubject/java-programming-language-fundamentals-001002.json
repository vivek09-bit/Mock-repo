[
    {
        "direction": null,
        "image_path": null,
        "question": "Which three are legal array declarations?int [] myScores [];char [] myChars;int [6] myScores;Dog myDogs [];Dog myDogs [7];",
        "options": {
            "A": "1, 2, 4",
            "B": "2, 4, 5",
            "C": "2, 3, 4",
            "D": "All are correct."
        },
        "correct_answer": "A",
        "answer_description": "(1), (2), and (4) are legal array declarations. With an array declaration, you can place the brackets to the right or left of the identifier. Option A looks strange, but it's perfectly legal to split the brackets in a multidimensional array, and place them on both sides of the identifier. Although coding this way would only annoy your fellow programmers, for the exam, you need to know it's legal.(3) and (5) are wrong because you can't declare an array with a size. The size is only needed when the array is actually instantiated (and the JVM needs to know how much space to allocate for the array, based on the type of array and the size)."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "public interface Foo \n{ \n    int k = 4; /* Line 3 */\n}Which three piece of codes are equivalent to line 3?final int k = 4;public int k = 4;static int k = 4;abstract int k = 4;volatile int k = 4;protected int k = 4;",
        "options": {
            "A": "1, 2 and 3",
            "B": "2, 3 and 4",
            "C": "3, 4 and 5",
            "D": "4, 5 and 6"
        },
        "correct_answer": "A",
        "answer_description": "(1), (2) and (3) are correct. Interfaces can have constants, which are always implicitlypublic,static, andfinal. Interface constant declarations ofpublic,static, andfinalare optional in any combination."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "Which one of the following will declare an array and initialize it with five numbers?",
        "options": {
            "A": "Array a = new Array(5);",
            "B": "int [] a = {23,22,21,20,19};",
            "C": "int a [] = new int[5];",
            "D": "int [5] array;"
        },
        "correct_answer": "B",
        "answer_description": "Option B is the legal way to declare and initialize anarraywith five elements.Option A is wrong because it shows an example of instantiating a class namedArray, passing the integer value 5 to the object's constructor. If you don't see the brackets, you can be certain there is no actual array object! In other words, anArrayobject (instance of classArray) is not the same as anarrayobject.Option C is wrong because it shows a legalarraydeclaration, but with no initialization.Option D is wrong (and will not compile) because it declares anarraywith a size. Arrays must never be given a size when declared."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "Which three are valid declarations of a char?char c1 = 064770;char c2 = 'face';char c3 = 0xbeef;char c4 = \\u0022;char c5 = '\\iface';char c6 = '\\uface';",
        "options": {
            "A": "1, 2, 4",
            "B": "1, 3, 6",
            "C": "3, 5",
            "D": "5 only"
        },
        "correct_answer": "B",
        "answer_description": "(1), (3), and (6) are correct.char c1 = 064770;is an octal representation of the integer value27128, which is legal because it fits into an unsigned 16-bit integer.char c3 = 0xbeef;is a hexadecimal representation of the integer value48879, which fits into an unsigned 16-bit integer.char c6 = '\\uface';is a Unicode representation of a character.char c2 = 'face';is wrong because you can't put more than one character in a char literal. The only other acceptable char literal that can go between single quotes is a Unicode value, and Unicode literals must always start with a'\\u'.char c4 = \\u0022;is wrong because the single quotes are missing.char c5 = '\\iface';is wrong because it appears to be a Unicode representation (notice the backslash), but starts with'\\i'rather than'\\u'."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "Which is the valid declarations within an interface definition?",
        "options": {
            "A": "public double methoda();",
            "B": "public final double methoda();",
            "C": "static void methoda(double d1);",
            "D": "protected void methoda(double d1);"
        },
        "correct_answer": "A",
        "answer_description": "Option A is correct. Apublicaccess modifier is acceptable. The method prototypes in an interface are all abstract by virtue of their declaration, and should not be declaredabstract.Option B is wrong. Thefinalmodifier means that this method cannot be constructed in a subclass. Afinalmethod cannot beabstract.Option C is wrong.staticis concerned with the class and not an instance.Option D is wrong.protectedis not permitted when declaring a method of an interface. See information below.Member declarations in an interface disallow the use of some declaration modifiers; you cannot usetransient,volatile, orsynchronizedin a member declaration in an interface. Also, you may not use theprivateandprotectedspecifiers when declaring members of an interface."
    }
]