[
    {
        "direction": null,
        "image_path": null,
        "question": "You want subclasses in any package to have access to members of a superclass. Which is the most restrictive access that accomplishes this objective?",
        "options": {
            "A": "public",
            "B": "private",
            "C": "protected",
            "D": "transient"
        },
        "correct_answer": "C",
        "answer_description": "Access modifiers dictate which classes, not which instances, may access features.Methods and variables are collectively known as members. Method and variable members are given access control in exactly the same way.privatemakes a member accessible only from within its own classprotectedmakes a member accessible only to classes in the same package or subclass of the classdefaultaccess is very similar to protected (make sure you spot the difference) default access makes a member accessible only to classes in the same package.publicmeans that all other classes regardless of the package that they belong to, can access the member (assuming the class itself is visible)finalmakes it impossible to extend a class, when applied to a method it prevents a method from being overridden in a subclass, when applied to a variable it makes it impossible to reinitialise a variable once it has been initialisedabstractdeclares a method that has not been implemented.transientindicates that a variable is not part of the persistent state of an object.volatileindicates that a thread must reconcile its working copy of the field with the master copy every time it accesses the variable.After examining the above it should be obvious that the access modifier that provides the most restrictions for methods to be accessed from the subclasses of the class from another package is C -protected. A is also a contender but C is more restrictive, B would be the answer if the constraint was the \"same package\" instead of \"any package\" in other words the subclasses clause in the question eliminates default."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "public class Outer \n{ \n    public void someOuterMethod() \n    {\n        //Line 5 \n    } \n    public class Inner { } \n    \n    public static void main(String[] argv) \n    {\n        Outer ot = new Outer(); \n        //Line 10\n    } \n}Which of the following code fragments inserted, will allow to compile?",
        "options": {
            "A": "new Inner(); //At line 5",
            "B": "new Inner(); //At line 10",
            "C": "new ot.Inner(); //At line 10",
            "D": "new Outer.Inner(); //At line 10"
        },
        "correct_answer": "A",
        "answer_description": "Option A compiles without problem.Option B gives error - non-static variable cannot be referenced from a static context.Option C packageotdoes not exist.Option D gives error - non-static variable cannot be referenced from a static context."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "interface Base \n{\n    boolean m1 ();\n    byte m2(short s);\n}which two code fragments will compile?interface Base2 implements Base {}abstract class Class2 extends Base{ public boolean m1(){ return true; }}abstract class Class2 implements Base {}abstract class Class2 implements Base{ public boolean m1(){ return (7 > 4); }}abstract class Class2 implements Base{ protected boolean m1(){ return (5 > 7) }}",
        "options": {
            "A": "1 and 2",
            "B": "2 and 3",
            "C": "3 and 4",
            "D": "1 and 5"
        },
        "correct_answer": "C",
        "answer_description": "(3) is correct because an abstract class doesn't have to implement any or all of its interface's methods. (4) is correct because the method is correctly implemented ((7 > 4)is a boolean).(1) is incorrect because interfaces don't implement anything. (2) is incorrect because classes don't extend interfaces. (5) is incorrect because interface methods are implicitlypublic, so the methods being implemented must bepublic."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "Which three form part of correct array declarations?public int a [ ]static int [ ] apublic [ ] int aprivate int a [3]private int [3] a [ ]public final int [ ] a",
        "options": {
            "A": "1, 3, 4",
            "B": "2, 4, 5",
            "C": "1, 2, 6",
            "D": "2, 5, 6"
        },
        "correct_answer": "C",
        "answer_description": "(1), (2) and (6) are valid array declarations.Option (3) is not a correct array declaration. The compiler complains with: illegal start of type. The brackets are in the wrong place. The following would work:public int[ ] aOption (4) is not a correct array declaration. The compiler complains with: ']' expected. A closing bracket is expected in place of the 3. The following works:private int a []Option (5) is not a correct array declaration. The compiler complains with 2 errors:']' expected. A closing bracket is expected in place of the 3 and<identifier> expected A variable name is expected aftera[ ]."
    },
    {
        "direction": null,
        "image_path": null,
        "question": "public class Test { }What is the prototype of the default constructor?",
        "options": {
            "A": "Test( )",
            "B": "Test(void)",
            "C": "public Test( )",
            "D": "public Test(void)"
        },
        "correct_answer": "C",
        "answer_description": "Option A and B are wrong because they use the default access modifier and the access modifier for the class ispublic(remember, the default constructor has the same access modifier as the class).Option D is wrong. The void makes the compiler think that this is a method specification - in fact if it were a method specification the compiler would spit it out."
    }
]